| **Objective**                                | **Details**                                                                                      | **Tools/Modules**                                                              | **Actions/Tasks**                                                                                                                                | **Expected Outcome**                                                     | **Timeframe** |
| -------------------------------------------- | ------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------ | ------------- |
| **1. Understand Checkov findings**           | Learn what Checkov findings are, their severity, types (Security, Compliance, Misconfigurations) | CLI, `checkov/common/output/report.py`, `checkov/common/severity.py`           | - Run Checkov on sample IaC files (Terraform, Kubernetes, etc.)<br> - Review generated reports (JSON/Console)                                    | Understand how findings are generated and classified                     | Week 1        |
| **2. Trace findings to code**                | Learn how to trace findings to the source IaC code                                               | Report JSON, file paths, resource blocks                                       | - Analyze report output<br> - Map `resource`, `file_path`, `start_line` and `end_line` fields to the IaC file                                    | Confidently trace each finding to the exact location in the codebase     | Week 1        |
| **3. Identify module-level vulnerabilities** | Learn which Checkov module or rule ID corresponds to a finding                                   | `checkov/rules/` modules, `checkov/common/models/`                             | - Investigate rules by ID (e.g., CKV\_AWS\_20)<br> - Understand rule structure (`BaseResourceCheck`)                                             | Ability to pinpoint the module responsible for each finding              | Week 2        |
| **4. Logging & triaging findings**           | Understand logging process and how findings are triaged                                          | Checkov GitHub Issues, internal logging system (e.g., Jira, Confluence)        | - Log new issues/false positives<br> - Document environment/config<br> - Tag owners/modules                                                      | Ensure findings are documented, reproducible, and traceable              | Week 2-3      |
| **5. Exception & suppression handling**      | Learn how Checkov handles exceptions, suppressions, and custom policies                          | `checkov/common/models/excluded_paths.py`, `.checkov.baseline`, `checkov.yaml` | - Use `--skip-check`, `--baseline`, or suppression comments<br> - Document business justification for exceptions                                 | Proper use of exceptions while maintaining compliance visibility         | Week 3        |
| **6. Rule development and version testing**  | Learn to build new rules, write unit tests, test Checkov upgrades                                | `checkov/common/base_check`, `tests/`, pytest, Git                             | - Develop sample rule<br> - Write tests in `tests/terraform/checks/`<br> - Test upgrades on real codebases<br> - Validate backward compatibility | Ability to contribute new rules and validate Checkov on version upgrades | Week 4-5      |
